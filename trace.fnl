(local utfeight (require :utf8))

; TODO cleanup anti-fennel-ed default errorhandler
(fn error-printer [msg layer]
  (print (: (fennel.traceback (.. "ERROR: " (tostring msg)) (+ 1 (or layer 1)))
            :gsub "\n[^\n]+$" "")))

(fn love.errorhandler [msg]
  (set-forcibly! msg (tostring msg))
  (error-printer msg 2)
  (when (or (or (not love.window) (not love.graphics)) (not love.event))
    (lua "return "))
  (when (or (not (love.graphics.isCreated)) (not (love.window.isOpen)))
    (local (success status) (pcall love.window.setMode 800 600))
    (when (or (not success) (not status)) (lua "return ")))
  (when love.mouse (love.mouse.setVisible true) (love.mouse.setGrabbed false)
    (love.mouse.setRelativeMode false)
    (when (love.mouse.isCursorSupported) (love.mouse.setCursor)))
  (when love.joystick
    (each [i v (ipairs (love.joystick.getJoysticks))]
      (v:setVibration)))
  (when love.audio (love.audio.stop))
  (love.graphics.reset)
  (local font (love.graphics.setNewFont 14))
  (love.graphics.setColor 1 1 1)
  (local trace (fennel.traceback))
  (love.graphics.origin)
  (var sanitizedmsg {})
  (each [char (msg:gmatch utfeight.charpattern)] (table.insert sanitizedmsg char))
  (set sanitizedmsg (table.concat sanitizedmsg))
  (local err {})
  (table.insert err "ERROR\n")
  (table.insert err sanitizedmsg)
  (when (not= (length sanitizedmsg) (length msg))
    (table.insert err "Invalid UTF-8 string in error message."))
  (table.insert err "\n")
  (each [l (trace:gmatch "(.-)\n")]
    (when (not (l:match :boot.lua))
      (set-forcibly! l (l:gsub "stack traceback:" "Traceback\n"))
      (table.insert err l)))
  (var p (table.concat err "\n"))
  (set p (p:gsub "\t" ""))
  (set p (p:gsub "%[string \"(.-)\"%]" "%1"))
  (fn draw []
    (when (not (love.graphics.isActive)) (lua "return "))
    (local pos 70)
    (love.graphics.clear (/ 89 255) (/ 157 255) (/ 220 255))
    (love.graphics.printf p pos pos (- (love.graphics.getWidth) pos))
    (love.graphics.present))
  (local full-error-text p)
  (fn copy-to-clipboard [] (when (not love.system) (lua "return "))
    (love.system.setClipboardText full-error-text)
    (set p (.. p "\nCopied to clipboard!")))
  (when love.system (set p (.. p "\n\nPress Ctrl+C or tap to copy this error")))
  (fn []
    (love.event.pump)
    (each [e a b c (love.event.poll)]
      (if (= e :quit) (lua "return 1") (and (= e :keypressed) (= a :escape))
          (lua "return 1")
          (and (and (= e :keypressed) (= a :c))
               (love.keyboard.isDown :lctrl :rctrl))
          (copy-to-clipboard) (= e :touchpressed)
          (do
            (var name (love.window.getTitle))
            (when (or (= (length name) 0) (= name :Untitled))
              (set name :Game))
            (local buttons [:OK :Cancel])
            (when love.system (tset buttons 3 "Copy to clipboard"))
            (local pressed
                   (love.window.showMessageBox (.. "Quit " name "?") "" buttons))
            (if (= pressed 1) (lua "return 1")
                (= pressed 3) (copy-to-clipboard)))))
    (draw)
    (when love.timer (love.timer.sleep 0.1))))
